Fuzz testing
Fuzz testing или Fuzzing – это метод тестирования программного обеспечения, зачастую автоматический или полуавтоматический. 
На вход компьютерной программы подаются невалидные, непредусмотренные или случайные данные. Программа должна корректно 
обработать исключения, а также предупреждать возможные утечки памяти. Fuzzing обычно используется для проверки проблем 
безопасности в программах. Это форма выборочной проверки, которая используется для тестирования аппаратного или программного 
обеспечения.
Основная идея такого подхода состоит в том, чтобы случайным образом “мутировать”, т.е. изменять ожидаемые программой входные
данные в произвольных местах. Все фаззеры работают примерно одинаковым образом, позволяя задавать некоторые ограничения на
матирование входных данных определенными байтами или последовательностью байтов.
Fuzzing часто используется в качестве метода тестирования черного ящика в больших программных проектах, в которых бюджет
позволяет разрабатывать продукты для тестирования. Данная техника позволяет обеспечивать только случайную выборку поведения
системы, демонстрирующую лишь то, что часть программного обеспечения может обрабатывать исключения без сбоев, но не в коем
случае не то, что программа ведет себя правильно. Это означает, что Fuzz тестирование обеспечивает общее качество продукта,
а не как не знамена исчерпывающего тестирования или формальных методов. Таким образом Fuzzing может предложить, какие части
программы должны получить особое внимание, проанализировать их код или переписать его.


1. Если Fuzzing только выявляет проблемы в обработке исключений, то каким образом он помогает получить информацию о том, 
какие части программы должны получить особое внимание?
В первую очередь необходимо определить правильное поведение программы при столкновении с искаженными входными данными. 
Далее мы передаем искаженные данные в программу до тех пор, пока не найдем то, после чего программа выдаст нам сообщение 
об ошибке, исключение и т. д. Сохраняем полученный таким образом лог файл и дамп памяти, посредством чего мы сможем 
воспроизвести данную ошибку снова. Вот нам и первый баг.

2. Можно ли на основе одного только Fuzz Testing получить информацию об утечках памяти?
Причины возникновения утечки памяти могут разнообразными. Для того, чтобы обнаружить утечку и получить о ней информацию 
существуют специальные методики и  инструменты. Чтобы инициировать утечку памяти, нужно чтобы программа работала, нужно 
взаимодействовать с ней, если она того требует. Фаззинг это лишь один из способов взаимодействия с программой.

3. В чем преимущества и недостатки метода? Когда его нельзя применить?
Из преимуществ данного подхода выделяется только его простота. Очевидным же недостатком является то, что фаззер ничего 
не знает о внутреннем устройстве программы и, в конечном итоге, для полного покрытия кода вынужден перебирать 
астрономическое количество вариантов (как нетрудно догадаться, полный перебор растет экспоненциально от размера входных 
данных O(c^n),c>1). Также фаззер не проверяет правильную обработку верных данных.
Фаззинг можно применить всегда, когда программа на вход может принять какие-либо данные. Но его лучше применять методом 
серого ящика представляющего собой комбинацию из метода черного ящика и восстановления кода (RCE – reverse code engineering).
